@mixin boxSizing($property) {
    box-sizing: $property;
    -ms-box-sizing: $property;
    -moz-box-sizing: $property;
    -webkit-box-sizing: $property;
}
@mixin transition($transition...) {
    transition: $transition;
    -ms-transition: $transition;
    -moz-transition: $transition;
    -webkit-transition: $transition;
}
@mixin bgCover($imgUrl, $bg_pos) {
    background-image: url($imgUrl);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: $bg_pos;
}

// generic transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}
// rotate
@mixin rotate($deg) {
    @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}
// translate
@mixin translate($x, $y) {
    @include transform(translate($x, $y));
}
// skew
@mixin skew($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin($origin) {
    -moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}
//linear gradient
@mixin linearGradient($top, $bottom){
    background: -moz-linear-gradient(top, $top 0%, $bottom 100%);
    background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
    background: linear-gradient(to bottom, $top 0%, $bottom 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{($top)}', endColorstr='#{($bottom)}',GradientType=0 );
}
@mixin placeholder($txtcolor) {
    &::-webkit-input-placeholder {
        color: $txtcolor;
        font-family: $fontFamily;
    }
    &::-moz-placeholder {
        color: $txtcolor;
        font-family: $fontFamily;
    }
    &:-moz-placeholder {
        color: $txtcolor;
        font-family: $fontFamily;
    }
    &:-ms-input-placeholder {
        color: $txtcolor;
        font-family: $fontFamily;
    }
}

@mixin animate($second) {
    -webkit-transition: all $second linear;
    -moz-transition: all $second linear;
    -ms-transition: all $second linear;
    -o-transition: all $second linear;
    transition: all $second linear;
}

@mixin ellips {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin midallign {
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin posFull($type, $left: null, $right: null, $top: null, $bottom: null) {
  position: $type;
  top: $top;
  left: $left;
  bottom: $bottom;
  right: $right;

}
@mixin backface-visibility ($arguments) {
  -webkit-backface-visibility: $arguments;
  -moz-backface-visibility: $arguments;
  -ms-backface-visibility: $arguments;
  -o-backface-visibility: $arguments;
  backface-visibility: $arguments;
}
@mixin font-face($font_name, $font-face-name, $fontStyle, $fontWeight) {
    $filepath: "../assets/font/" + $font_name;
    @font-face {
        font-family: $font-face-name;
        font-style: $fontStyle;
        font-weight: $fontWeight;
        src: url($filepath + ".eot");
        src: url($filepath + ".eot?#iefix") format('embedded-opentype'), url($filepath + ".woff") format('woff'), url($filepath + ".ttf")  format('truetype'), url($filepath + ".svg") format('svg');
    }
}
